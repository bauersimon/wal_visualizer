; Utils Stuff.

(import utils)

(defun empty [l] (= 0 (length l)))
(defun filter
  [f xs]
  (cond
    [(empty xs) (list)]
    [(f (first xs)) (+ (list (first xs)) (filter f (rest xs)))]
    [#t (filter f (rest xs))]))
(defun int-pos [i] (>= i 0))

; Latency.

(defun latency
  [idx-rq idx-rs]
  (cond
    ; Base case: empty list.
    [(&& (empty idx-rq) (empty idx-rs)) (list)]
    ; Append "-1" for as long as there are no responses anymore.
    [(empty idx-rs) (+ (list -1) (latency (rest idx-rq) (list)))]
    ; Append "-1" for as long as there are no request anymore.
    [(empty idx-rq) (+ (list -1) (latency (list) (rest idx-rs)))]
    ; Default: Compute latency.
    [#t
     (let ([rq (first idx-rq)] [rs (first idx-rs)])
       (cond
         ; The response is for the next request.
         [(&& (>= (length idx-rq) 2) (>= rs (second idx-rq)))
          (+ (list -1) (latency (rest idx-rq) idx-rs))]
         ; Valid response.
         [(>= rs rq) (+ (list (- rs rq)) (latency (rest idx-rq) (rest idx-rs)))]
         ; Invalid response.
         [#t (+ (list -1) (latency idx-rq (rest idx-rs)))]))]))

; Tests.

(when #t
  (call utils.test "Empty" (list) (latency (list) (list)))
  (call utils.test "Simple" (list 0 1 4) (latency (list 1 3 5) (list 1 4 9)))
  (call utils.test "No Responses End" (list 0 1 -1 -1) (latency (list 1 3 7 8) (list 1 4)))
  (call utils.test "No Requests End" (list 0 1 -1 -1) (latency (list 1 3) (list 1 4 7 9)))
  (call utils.test "No Response" (list 0 1 -1 1) (latency (list 1 3 7 8) (list 1 4 9)))
  (call utils.test "Duplicated Response" (list 0 1 -1 1) (latency (list 1 3 8) (list 1 4 7 9)))
  (call utils.test "Complex" (list 0 -1 2 -1 3 -1) (latency (list 1 3 8 10 15) (list 1 2 5 13)))
  (call utils.test "Filter" (list 0 2 3) (filter int-pos (list 0 -1 2 -1 3 -1))))